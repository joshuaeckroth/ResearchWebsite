<?php

/**
 * Valid permissions for this module
 * @return array An array of valid permissions
 */
function note_pdf_perm() {
  return array('download pdf');
}

function note_pdf_menu() {
  $items['node/%node/pdf'] = array(
    'title' => 'PDF',
    'page callback' => 'note_pdf_tab_page',
    'page arguments' => array(1),
    'access callback' => 'note_pdf_tab_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

function note_pdf_tab_access($node = NULL) {
  if($node->type == 'page')
    return TRUE;
  return FALSE;
}

function note_pdf_tab_page($node = NULL) {
  drupal_set_title(t('PDF export of %title', array('%title' => $node->title)));

  $output = drupal_get_form('note_pdf_tab_form', $node);
  return $output;
}

function note_pdf_tab_form($form_state, &$node) {
  $form['#tab'] = TRUE;
  $form['node'] = array(
    '#type' => 'value',
    '#value' => $node,
  );
  $form['font'] = array(
    '#type' => 'select',
    '#title' => t('Font'),
    '#default_value' => 'Helvetica',
    '#options' => array(
      'Helvetica' => 'Helvetica',
      'Palatino' => 'Palatino',
    ),
  );
  $form['spacing'] = array(
    '#type' => 'select',
    '#title' => t('Spacing'),
    '#default_value' => 'Single',
    '#options' => array(
      'Single' => 'Single',
      'Double' => 'Double'
    ),
  );
  $form['dated'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include date'),
    '#default_value' => 1,
  );
  $form['authored'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include author'),
    '#default_value' => 1,
  );
  $form['references'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include references'),
    '#default_value' => 1,
  );
  $form['colorize_href'] = array(
    '#type' => 'checkbox',
    '#title' => t('Colorize links'),
    '#default_value' => 1,
  );
  $form['include_url'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include note URL'),
    '#default_value' => 0,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Download PDF')
  );
  return $form;
}

function note_pdf_tab_form_submit($form, &$form_state) {
  global $base_url;

  $node = node_build_content($form_state['values']['node'], FALSE, FALSE);
  $content = drupal_render($node->content);
  $node->body = $content;
  unset($node->teaser);
  node_invoke_nodeapi($node, 'alter', FALSE, FALSE);

  $uid = $node->uid;
  $result = db_query("SELECT title FROM {node} n WHERE n.type = 'uprofile' AND n.uid = %d", $uid);
  $author = db_fetch_object($result);

  $keywords = array();
  foreach ($node->taxonomy as $term) {
    $keywords []= $term->name;
  }

  $path = drupal_get_path_alias('node/'.$node->nid, isset($node->language) ? $node->language : '');
  $path = preg_replace('/\//', '--', $path);

  $tex = file_destination(file_create_path(file_directory_temp() . '/' . $path . ".tex"),
                          FILE_EXISTS_RENAME);
  $pdf = preg_replace('/\.tex$/', '.pdf', $tex);

  $tex_handle = fopen($tex, "w");
  fwrite($tex_handle, '\documentclass{article}');
  fwrite($tex_handle, '\usepackage['.
    ($form_state['values']['colorize_href'] ? 'colorlinks=true,' : 'colorlinks=false,').
    'pdftex,pdfborder={0 0 0},'.
    ($form_state['values']['authored'] ? 'pdfauthor={'.$author->title.'},' : '').
    'pdftitle={'.$node->title.'},pdfkeywords={'.implode(", ", $keywords).'}]{hyperref}');
  fwrite($tex_handle, '\usepackage[margin=1in]{geometry}');

  if($form_state['values']['font'] == 'Helvetica') {
      fwrite($tex_handle, '\usepackage{helvet}');
      fwrite($tex_handle, '\renewcommand*\familydefault{\sfdefault}');
  }
  else if($form_state['values']['font'] == 'Palatino')
    fwrite($tex_handle, '\usepackage{palatino}');

  fwrite($tex_handle, '\usepackage{graphicx}');

  if($form_state['values']['spacing'] == 'Double') {
      fwrite($tex_handle, '\usepackage{setspace}\doublespacing');
  }

  fwrite($tex_handle, '\setlength{\parindent}{0em}');
  fwrite($tex_handle, '\setlength{\parskip}{1em}');
  fwrite($tex_handle, '\title{'.$node->title.'}');

  if($form_state['values']['authored'] == 1)
    fwrite($tex_handle, '\author{'.$author->title.'}');
  else
    fwrite($tex_handle, '\author{}');

  if($form_state['values']['dated'] == 1)
    fwrite($tex_handle, '\date{'.format_date($node->changed, 'custom', 'F j, Y').'}');
  else
    fwrite($tex_handle, '\date{}');

  fwrite($tex_handle, '\begin{document}');

  fwrite($tex_handle, '\maketitle ');

  $body = $node->body;

  // remove "summarizes" junk
  $body = preg_replace('/<div class="field field-type-nodereference field-field-note-summarizes">.*/s', '', $body);

  if($form_state['values']['references'] == 1) {
    /* find references */
    $citekeys = array();
    $bibentries = array();
    preg_match_all('/<a.*?href=\"\/resource\/(.*?)\"/', $body, $matches, PREG_SET_ORDER);
    foreach ($matches as $match) {
      $citekeys []= $match[1];
    }
    $citekeys = array_unique($citekeys);
    foreach ($citekeys as $citekey) {
      $bibentries []= _biblio_citekey_print($citekey);
    }
    sort($bibentries);
    
    if(count($bibentries) > 0) {
      $body .= "<p><strong>References</strong></p>";
      $body .= "\\raggedright\n";
      $body .= "\\leftskip 1em\n\\parindent -1em\n";
      $body .= implode("\n\n", $bibentries);
    }
  }
  
  // graphviz images
  $body = preg_replace('/<div class="graphviz graphviz-png">' .
		       '<img src="'.preg_replace('/\//', '\/', $base_url) .
		       '(.*?)" title=""  \/>\n<\/div>/',
		       '\begin{center}\includegraphics[scale=0.75]{'.
		       $_SERVER['DOCUMENT_ROOT'].base_path().
		       '$1}\end{center}', $body);

  $body = preg_replace('/&nbsp;/', ' ', $body);
  $body = preg_replace('/<p.*?>/s', "\n\n", $body);
  $body = preg_replace('/<\/p>/', "\n\n", $body);
  $body = preg_replace('/<br.*?>/s', "\\\\\\\\", $body);
  $body = preg_replace('/<strong>(.*?)<\/strong>/s', '\textbf{$1}', $body);
  $body = preg_replace('/<em>(.*?)<\/em>/s', '\emph{$1}', $body);
  $body = preg_replace('/<i>(.*?)<\/i>/s', '\emph{$1}', $body);
  $body = preg_replace('/<u>(.*?)<\/u>/s', '\emph{$1}', $body);
  $body = preg_replace('/<blockquote>/', '\begin{quote}', $body);
  $body = preg_replace('/<\/blockquote>/', '\end{quote}', $body);
  $body = preg_replace('/<\/?span.*?>/s', '', $body);
  $body = preg_replace('/<tt>(.*?)<\/tt>/s', '\texttt{$1}', $body);
  $body = preg_replace('/<code>(.*?)<\/code>/s', '\texttt{$1}', $body);
  $body = preg_replace('/<sub>(.*?)<\/sub>/s', "\$_{\\textrm{\\small $1 }}\$", $body);
  $body = preg_replace('/<sup>(.*?)<\/sup>/s', "\$^{\\textrm{\\small $1 }}\$", $body);
  $body = preg_replace('/<ul.*?>/s', '\begin{itemize}', $body);
  $body = preg_replace('/<\/ul>/', '\end{itemize}', $body);
  $body = preg_replace('/<ol.*?>/s', '\begin{enumerate}', $body);
  $body = preg_replace('/<\/ol>/', '\end{enumerate}', $body);
  $body = preg_replace('/<li.*?>/s', '\item ', $body);
  $body = preg_replace('/<\/li>/', '', $body);
  $body = preg_replace_callback('/<a href="(.*?)">(.*?)<\/a>/s', 'href_to_hyperref', $body);
  $body = preg_replace("/(\\s)(?:'|&#039;)(\\S)/", '$1`$2', $body);
  $body = preg_replace("/&#0?39;(\"|&quot;)/", "' ''", $body);
  $body = preg_replace('/&#0?39;/', "'", $body); 
  $body = preg_replace('/(\s|\{)(?:"|&quot;)(\S)/', '$1``$2', $body);
  $body = preg_replace('/^(?:"|&quot;)(\S)/', '``$1', $body);
  $body = preg_replace('/(\S)(?:"|&quot;)/', "\$1''", $body);
  $body = preg_replace('/\|/', '$|$', $body);
  $body = preg_replace('/\x{00E0}/u', "\\`{a}", $body);
  $body = preg_replace('/&agrave;/', "\\`{a}", $body);
  $body = preg_replace('/\x{00FC}/u', '\"{u}', $body);
  $body = preg_replace('/\x{00F6}/u', '\"{o}', $body);
  $body = preg_replace('/\x{2013}/u', '--', $body);
  $body = preg_replace('/\x{2014}/u', '---', $body);
  $body = preg_replace('/<!--(.*?)-->/s', '', $body);
  $body = preg_replace('/&amp;/', '\&', $body);
  $body = preg_replace('/&lt;/', '\$<\$', $body);
  $body = preg_replace('/&gt;/', '\$>\$', $body);
  $body = preg_replace('/~/', '\$\sim\$', $body);
  $body = preg_replace('/%/', '\%', $body);
  $body = preg_replace('/(\d+)--(\d+)/', '$1\mbox{--}$2', $body); // keep digits with ndash on same line

  fwrite($tex_handle, $body);

  if($form_state['values']['include_url'] == 1) {
    fwrite($tex_handle, "\n\n".'\vskip 0.5in'."\n\n".'\begin{center}\footnotesize\url{'.$base_url.'/node/'.$node->nid.'}\end{center}');
  }
    
  fwrite($tex_handle, '\end{document}');

  exec('pdflatex -output-directory /tmp ' . $tex);
  
  $file = basename($pdf);

  $headers[] = "Content-Type: application/pdf";
  $headers[] = "Content-Disposition: attachment; filename=\"".$file."\"";

  file_transfer($pdf, $headers);
}

function href_to_hyperref($matches)
{
  global $base_url;

  if(substr($matches[1], 0, 1) == "/") {
    return '\href{'.$base_url.$matches[1].'}{'.$matches[2].'}';
  } else {
    return '\href{'.$matches[1].'}{'.$matches[2].'}';
  }
}
